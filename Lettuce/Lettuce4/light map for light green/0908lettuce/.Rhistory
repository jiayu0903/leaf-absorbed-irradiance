setwd("C:/Users/lenovo/OneDrive - Wageningen University & Research/Jiayu-Paper1 Raw data/Response to reviewers/transpiration by  balance")
library(ggplot2)
library(cowplot)
library(readxl)
# Directory of the data
dr <- "./balance-0901/"
date <- "2023-09-01"
time <- "18:09:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Read and process leaf weight data
dW <- read.csv(paste0(dr, "Weight.csv"))
names(dW) <- c("Time", "reltime","Weight")
# Parse date string
dW$ts <- as.POSIXct(paste(date, dW$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dW, aes(x=ts, y=Weight)) + geom_point()
# Use splines to extract data at common time points
spl_W <- splinefun(dW$time, dW$Weight)
View(dW)
spl_W <- splinefun(dW$reltime, dW$Weight)
fitt <- smooth.spline(dW$reltime, dW$Weight, cv=TRUE)
fitt$df
sspl_W <- smooth.spline(dW$reltime, dW$Weight, df=135)
plot(Weight~time, dW, pch=16)
plot(Weight~time, dW, pch=16)
plot(Weight~reltime, dW, pch=16)
lines(predict(sspl_W, reltime)$y~reltime, dW, lty=2, lwd=2, col="red")
library(ggplot2)
library(cowplot)
library(readxl)
# Directory of the data
dr <- "./balance-0901/"
date <- "2023-09-01"
time <- "18:09:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Read and process leaf weight data
dW <- read.csv(paste0(dr, "Weight.csv"))
names(dW) <- c("Time", "reltime","Weight")
# Parse date string
dW$ts <- as.POSIXct(paste(date, dW$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dW, aes(x=ts, y=Weight)) + geom_point()
# Use splines to extract data at common time points
spl_W <- splinefun(dW$reltime, dW$Weight)
fitt <- smooth.spline(dW$reltime, dW$Weight, cv=TRUE)
fitt$df
# Remove high frequency fluctuations
sspl_W <- smooth.spline(dW$reltime, dW$Weight, df=135)
# Check spline function
plot(Weight~reltime, dW, pch=16)
lines(predict(sspl_W, reltime)$y~reltime, dW, lty=2, lwd=2, col="red")
# 创建一个新的数据框来存储计算结果
t_interval <- seq(0, max(dW$reltime) - 300, by = 1)  # 生成每隔1秒的时间点，确保不超过最大时间减去300秒
result_df <- data.frame(TimeIntervalStart = t_interval, AvgWeightChange = numeric(length(t_interval)))
# 计算每个时间间隔的平均蒸腾速率
for (i in seq_along(t_interval)) {
start_time <- t_interval[i]
end_time <- start_time + 300
# 只计算包含至少300秒数据的时间段
if (end_time <= 940) {
weight_change_in_interval <- weight_change[(dW$reltime >= start_time) & (dW$reltime < end_time)]
# 确保数据点数量大于等于300秒
if (length(weight_change_in_interval) >= 300) {
avg_weight_change <- mean(weight_change_in_interval)
result_df$AvgWeightChange[i] <- avg_weight_change
}
}
}
View(result_df)
View(dW)
d <- data.frame(time=dW$reltime,
Weight=predict(sspl_W, reltime)$y)
plot(Weight~reltime, dW, pch=16)
lines(predict(sspl_W, reltime)$y~reltime, dW, lty=2, lwd=2, col="red")
d <- data.frame(time=dW$reltime,
Weight=predict(sspl_W, reltime)$y)
d <- data.frame(time=dW$reltime,
Weight=predict(sspl_W, reltime)$y)
d <- data.frame(time=dW$reltime,
Weight=predict(sspl_W, dW$reltime)$y)
# 创建一个新的数据框来存储计算结果
t_interval <- seq(0, max(dW$reltime) - 300, by = 1)  # 生成每隔1秒的时间点，确保不超过最大时间减去300秒
result_df <- data.frame(TimeIntervalStart = t_interval, AvgWeightChange = numeric(length(t_interval)))
# 计算每个时间间隔的平均蒸腾速率
for (i in seq_along(t_interval)) {
start_time <- t_interval[i]
end_time <- start_time + 300
# 只计算包含至少300秒数据的时间段
if (end_time <= 940) {
weight_change_in_interval <- weight_change[(d$time >= start_time) & (d$time < end_time)]
# 确保数据点数量大于等于300秒
if (length(weight_change_in_interval) >= 300) {
avg_weight_change <- mean(weight_change_in_interval)
result_df$AvgWeightChange[i] <- avg_weight_change
}
}
}
setwd("C:/Users/lenovo/OneDrive - Wageningen University & Research/Jiayu-Paper1 Raw data/Response to reviewers/transpiration by  balance")
library(ggplot2)
library(cowplot)
library(readxl)
# Directory of the data
dr <- "./balance-0901/"
date <- "2023-09-01"
time <- "18:09:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Read and process leaf weight data
dW <- read.csv(paste0(dr, "Weight.csv"))
names(dW) <- c("Time", "reltime","Weight")
# Parse date string
dW$ts <- as.POSIXct(paste(date, dW$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dW, aes(x=ts, y=Weight)) + geom_point()
# Use splines to extract data at common time points
spl_W <- splinefun(dW$reltime, dW$Weight)
fitt <- smooth.spline(dW$reltime, dW$Weight, cv=TRUE)
fitt$df
# Remove high frequency fluctuations
sspl_W <- smooth.spline(dW$reltime, dW$Weight, df=135)
# Check spline function
plot(Weight~reltime, dW, pch=16)
lines(predict(sspl_W, reltime)$y~reltime, dW, lty=2, lwd=2, col="red")
d <- data.frame(time=dW$reltime,
Weight=predict(sspl_W, dW$reltime)$y)
# calculatle the time interval & weight changes
time_interval <- diff(d$time)
weight_change <- diff(d$Weight)
# change time interval to 1s
time_interval_1s <- time_interval * 1000
weight_change_1s <- numeric(length(time_interval_1s))
#Calculate the average weight change per 1 s for each window
window_size <- 300
E <- numeric(length(time_interval_1s) - window_size + 1)
for (i in 1:(length(time_interval_1s) - window_size + 1)) {
start_index <- i
end_index <- i + window_size - 1
weight_change_1s[i] <- mean(weight_change[start_index:end_index])
E[i] <- weight_change_1s[i] / time_interval_1s[start_index]
}
E
ggplot(data.frame(time = d$time[-1], E = c(rep(NA, window_size - 1), E)), aes(x = time)) +
geom_point(aes(y = E))
plot(Weight~reltime, dW, pch=16)
lines(predict(sspl_W, reltime)$y~reltime, dW, lty=2, lwd=2, col="red")
setwd("C:/Users/lenovo/OneDrive - Wageningen University & Research/Jiayu-Paper1 Raw data/Response to reviewers/transpiration by  camera/0901tomato")
library(ggplot2)
library(cowplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(readxl)
color_scheme_set("brightblue")
theme_set(theme_cowplot())
###
#
# Warning: this model is only for a transpiring leaf !
#
###
# Directory of the data
dr <- "./tomato-0901/"
date <- "2023-09-01"
time <- "18:22:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Time points when the light was switched on
tON <- c("18:22:00")
# Observed vs. estimated light intensity (same units)
PAR <- c(29.33)
# Read and process air temperature data
dA <- read.csv(paste0(dr, "AirT.csv"))
dA$time <- as.POSIXct(paste(date, dA$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dA, aes(x=time, y=Temperature)) + geom_point()
ggplot(dA, aes(x=time, y=Humidity)) + geom_point()
# Read and process leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time", "Temperature","Treflect")
# Parse date string
dL$ts <- as.POSIXct(paste(date, dL$Date), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dL, aes(x=ts, y=Temperature)) + geom_point()
# Find initial time common to both data sets
dA$time <- as.numeric(dA$time - t0)
dL$time <- dL$Time + as.numeric(dL$ts[1] - t0)
dA <- subset(dA, time >= 0)
dL <- subset(dL, time >= 0)
# Use splines to extract data at common time points
spl_A <- splinefun(dA$time, dA$Temperature)
spl_R <- splinefun(dA$time, dA$Humidity)
spl_L <- splinefun(dL$time, dL$Temperature)
spl_E <- splinefun(dL$time, dL$Treflect)
fitt <- smooth.spline(dA$time, dA$Humidity, cv=TRUE)
fitt2 <- smooth.spline(dA$time, dA$Temperature, cv=TRUE)
fitt4 <- smooth.spline(dL$time, dL$Treflect, cv=TRUE)
fitt$df
fitt2$df
fitt4$df
# Remove high frequency fluctuations
sspl_R <- smooth.spline(dA$time, dA$Humidity, df=55)
sspl_A <- smooth.spline(dA$time, dA$Temperature, df=19)
sspl_E <- smooth.spline(dL$time, dL$Treflect, df=206)
# Check spline function
plot(Humidity~time, dA, pch=16)
points(predict(sspl_R, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Temperature~time, dA, pch=16)
lines(predict(sspl_A, time)$y~time, dA, lty=2, lwd=2, col="red")
# New time points
time <- subset(dL, time < max(dA$time))$time
# Merge the data sets
d <- data.frame(time=time, Ta=predict(sspl_A, time)$y,
Treflect=predict(sspl_E, time)$y,
Tl=spl_L(time),
RH=predict(sspl_R, time)$y)
# Correct for offset between Rotronic sensor and thermal camera temperature
#d$Tl <- d$Tl - (tail(d$Tl) - tail(d$Ta))
ggplot(d, aes(x=time)) + geom_point(aes(y=Ta)) +
geom_point(aes(y=Tl), col="red") + geom_point(aes(y=Treflect), col="green") +ylab("Temperature")
ggplot(d, aes(x=time, y=Tl - Ta)) + geom_point() + ylab("Tl - Ta")
setwd("C:/Users/lenovo/OneDrive - Wageningen University & Research/Jiayu-Paper1 Raw data/Response to reviewers/transpiration by  camera/0906/0906tomato")
setwd("C:/Users/lenovo/OneDrive - Wageningen University & Research/Jiayu-Paper1 Raw data/Response to reviewers/transpiration by  camera/0906/0906tomato")
library(ggplot2)
library(cowplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(readxl)
color_scheme_set("brightblue")
theme_set(theme_cowplot())
###
#
# Warning: this model is only for a transpiring leaf !
#
###
# Directory of the data
dr <- "./tomato-0906/"
date <- "2023-09-06"
time <- "14:53:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Time points when the light was switched on
tON <- c("14:53:00",
"14:57:00",
"15:01:00")
# Observed vs. estimated light intensity (same units)
PAR <- c(33.51604087,
50.68430306,
66.49014876)
# Read and process air temperature data
dA <- read.csv(paste0(dr, "AirT.csv"))
dA$time <- as.POSIXct(paste(date, dA$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dA, aes(x=time, y=Temperature)) + geom_point()
ggplot(dA, aes(x=time, y=Humidity)) + geom_point()
# Read and process leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time", "Temperature","Treflect")
# Parse date string
dL$ts <- as.POSIXct(paste(date, dL$Date), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dL, aes(x=ts, y=Temperature)) + geom_point()
# Find initial time common to both data sets
dA$time <- as.numeric(dA$time - t0)
dL$time <- dL$Time + as.numeric(dL$ts[1] - t0)
dA <- subset(dA, time >= 0)
dL <- subset(dL, time >= 0)
# Use splines to extract data at common time points
spl_A <- splinefun(dA$time, dA$Temperature)
spl_R <- splinefun(dA$time, dA$Humidity)
spl_L <- splinefun(dL$time, dL$Temperature)
spl_E <- splinefun(dL$time, dL$Treflect)
fitt <- smooth.spline(dA$time, dA$Humidity, cv=TRUE)
fitt2 <- smooth.spline(dA$time, dA$Temperature, cv=TRUE)
fitt4 <- smooth.spline(dL$time, dL$Treflect, cv=TRUE)
fitt$df
fitt2$df
fitt4$df
# Remove high frequency fluctuations
sspl_R <- smooth.spline(dA$time, dA$Humidity, df=55)
sspl_A <- smooth.spline(dA$time, dA$Temperature, df=19)
sspl_E <- smooth.spline(dL$time, dL$Treflect, df=206)
# Check spline function
plot(Humidity~time, dA, pch=16)
points(predict(sspl_R, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Temperature~time, dA, pch=16)
lines(predict(sspl_A, time)$y~time, dA, lty=2, lwd=2, col="red")
# New time points
time <- subset(dL, time < max(dA$time))$time
# Merge the data sets
d <- data.frame(time=time, Ta=predict(sspl_A, time)$y,
Treflect=predict(sspl_E, time)$y,
Tl=spl_L(time),
RH=predict(sspl_R, time)$y)
# Correct for offset between Rotronic sensor and thermal camera temperature
#d$Tl <- d$Tl - (tail(d$Tl) - tail(d$Ta))
ggplot(d, aes(x=time)) + geom_point(aes(y=Ta)) +
geom_point(aes(y=Tl), col="red") + geom_point(aes(y=Treflect), col="green") +ylab("Temperature")
ggplot(d, aes(x=time, y=Tl - Ta)) + geom_point() + ylab("Tl - Ta")
# Function to be passed to the ODE solver
l <- NULL
l$N1 <- nrow(d)
# Time light was turned ON
l$tON <- paste(date, tON)
l$tON <- as.POSIXct(l$tON, format="%Y-%m-%d %H:%M:%OS")
l$tON <- as.numeric(l$tON - t0, units="secs")
l$N2 <- length(l$tON)
l$ts <- diff(c(0, l$tON, max(d$time)))
l$N3 <- length(l$ts)
l$dt <- rep(30, length(l$tON))
l$N4 <- length(l$dt)
l$Tair <- d$Ta
l$RH <- d$RH / 100
l$Treflect <- d$Treflect
l$Tleaf <- d$Tl
l$time <- d$time
l$step <- 0.1
l$tmax <- max(d$time)
###
# Generate initial parameter values
##
init <- function()
{
list(gbl=runif(1,0.01,0.03),
gsw=runif(1,0.001,0.003),
Qabs=runif(length(l$tON), 20, 200),
sT=runif(1,0.2,0.3))
}
# Compile the bayesian model
file <- file.path(getwd(), "model.stan")
header <- file.path(getwd(), "user_header.hpp")
mod <- cmdstan_model(file,
cpp_options=list(USER_HEADER=header),
stanc_options = list("allow-undefined"))
# Fit the model to observed data
fit <- mod$sample(
data = l,
chains = 4,
parallel_chains = 4,
refresh = 10,
init=init,
iter_warmup = 500,
iter_sampling = 500,
adapt_delta=0.7,
save_warmup = T,
output_dir=getwd(),
metric = "dense_e",
step_size=0.0001
)
