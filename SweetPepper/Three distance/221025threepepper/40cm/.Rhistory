state.x77
state <- as.data.frame(state.x77[,c("Population","Murder","Income")])
state
mtcars <- datasets::mtcars
mtcars
library(datasets)
mtcars
datasets::BJsales
uscrime
library(MASS)
UScrime
is
（package:graphics)
is
（"package:graphics")
ls
（"package:graphics")
demo(graphics)
women
plot(women)
plot(as.factor(women$weight))
mehtods(plot)
library(methods)
mehtods(plot)
methods(plot)
cor
mystats <- function(x,na.omit=FALSE)()
mystats <- function(x,na.omit=FALSE)(
if (na.omit)
x <-x[!is.na(x)]
m <- mean(x)
m <- mean(x)
n <- length(x)
i=1;while(i<=10){print("hello world"); i=i+1}
score=98
if (score>70) {ptint("passed")} else (print("22else"))
if (score>70) {print("passed")} else (print("22else"))
ifelse(score>60, print("passed"))
ifelse(score>60, "passed")
ifelse(score>60, "passed", "fcs")
score=34
ifelse(score>60, "passed", "fcs")
women
lm.fit(heighr~weight,data=women)
fit <- lm(height~weight, data=women)
fit
summary(fit)
plot(height,weighte)
plot(women$height,women$weight)
abline(fit)
plot(women$height,women$weight,abline=fit)
abline(fit)
plot(women$height,women$weight,abline=fit)
plot(women$height,women$weight)
abline(fit)
plot(women$weight,women$height)
abline(fit)
plot(weihgt~height, data = women)
plot(weight~height, data = women)
women
fit <- lm(weight~height, data = women)
dit
fit
plot(fit)
par(mfrow=c(2,2))
plot(fit)
1+1
1+\
1
1:50
a <- 1+1
a
b <- ()
b <- (1+1)
a <- 6/(4+)
a <- 6/(4+
1)
a <- 6/(4+1
a <- 6/(4
a <- 6/(4+1
a <-
a <- 6
a <- 6/(
4+
1
)
a <- 6/(4
a <-
a <-
a <- (1:110,0.05)
a <- mean(1:110,0.05)
a
a <- mean(1:10,0.05)
a
a <- mean(1:2,0.05)
a
a <- mean(1:2)
a
a <- mean(1:10)
a
a <- mean(1:2,0.04)
a
a <- mean(1:2,trim = 0.2)
a
ls
ls()
install.packages(c("cli", "crayon", "deSolve", "digest", "distributional", "fansi", "generics", "glue", "jsonlite", "lifecycle", "magrittr", "pillar", "posterior", "Rcpp", "rlang", "tibble", "withr"))
test_vector <- c(1,10,23,3992)
typeof()
typeof(test_vector)
letters
water_level <- c("control","drought",100,200)
typeof(water_level)
water_level <- c("control","drought","100","200")
typeof(water_level)
water_factor <- factor(water_level)
levels(water_factor)
character_values <- c("zhang","jia","yu")
b <- -1,-2,6,14
a <-c(1,2,3,4)
b <- c(-1,-2,6,14)
c <- a+b
c
vec_int <- c(1,2,3)
vec_log <- c(TRUE,FALSE,TRUE)
vec_char <- c("I","am","a","hero")
d <- c(vec_char,vec_int,vec_log)
d
typeof(vev_int)
typeof(vec_int)
c <- seq(10,30,2)
c
c <- seq(10,30,1)
cc
c
letters1 <- letters[rep(FALSE,13)]
letters1
letters1 <- letters[c(rep(FALSE,13),rep(TRUE,13))]
letters1
speal_length
sepal_length <- iris$Sepal.Length
sepal_width <- iris$Sepal.Width
petal_length <- iris$Petal.Length
petal_width <- iris$Petal.Width
species <- iris$Species
species
as.numeric(species
)
plot(petal_width~sepal_width,col=species, pch=as.integer(species))
plot(sepal_width~ petal_width,col=species,pch=as.integer(species))
weight1 <- ChickWeight$weight[1:12]
Time1 <- ChickWeight$Time[1:12]
weight2 <- ChickWeight$weight[13:24]
Time2 <- ChickWeight$Time[13:24]
plot(weight1~Time1,xlim=c(1,24),ylim=c(1,24)))
points(weight2~Time2, col="red",pch=2)
plot(weight1~Time1,xlim=c(1,24),ylim=c(1,24)))
points(weight2~Time2, col="red",pch=2)
plot(weight1~Time1,xlim=c(1,24),ylim=c(1,24))
points(weight2~Time2, col="red",pch=2)
plot(weight1~Time1,xlim=range(Time1,Time2),ylim=range(weight1,weight2
))
points(weight2~Time2, col="red",pch=2)
points(weight2~Time2, col="red",pch=1)
points(weight2~Time2, col="red")
points(weight2~Time2, col="red")
boxplot(species~petal_length,horizontal = TRUE)
boxplot(species~petal_length)
boxplot(species~petal_length)
x <- 1:10
x1 <- 1:10
yi <- 10:20
plot(yi~x1)
plot(y1~x1)
plot(yi~x1)
which(x1>10)
which(yi>10)
a <- 1:30
a_v <- matrix(a,nrows=4)
a_v <- matrix(a,nrows=6)
a_v <- matrix(x1,nrows=6)
a_vector <- 1:30
a_matraoc <- matrix(a_vector,nrow = 3)
a_matix <- 1:40
a <- 1:40
a_matix <- matrix(a,nrow=8)
b <- a_matix[c(3:7),c(3,4)]
b
b <- a_matix[3:7,3,4]
b <- a_matix[3:7,3:4]
b
vector_a <- rep(c(TRUE,FALSE),3)
vector_b <- c("jeijfie")
View(iris)
plantID <- c(1,2,3,4)
weight <- c(2.3,2.4,3.5,33)
water <- c(200,200,300,300)
nitrogen <- c(2.5,2.5,2.5,2.5)
data.frame(plantID,weight,water,nitrogen)
plant_data <- data.frame(plantID,weight,water,nitrogen)
ppp <- plant_data[3.2]
iris1 <- iris["water","nitrogen"]
iris1 <- iris[c"Petal.Length","Petal.Width,"Species""]
iris1 <- iris[c("Petal.Length","Petal.Width,"Species")]
iris1 <- iris[c("Petal.Length","Petal.Width,"Species")]
q <- c("Petal.Length","Petal.Width,"Species")
airquality
a <- airquality$Temp>92,]
a <- airquality$Temp>92,]
summary(airquality)
q <- airquality$Wind<85
q <- airquality [airquality$Wind<85,]
q
s <- airquality$Month==6
s <- airquality$Month==6 &airquality$Temp>75
airquality[s,]
airquality[s]
airquality[,s]
airquality[s]
airquality[s,]
str(iris)
aubs
a <- subset(airquality,Temp>90)
a
summary(airquality)
mean(airquality$Ozone,na.rm = TRUE)
a <- subset(airquality,airquality$Ozone>100)
a
table(airquality$Month)
factor(airquality$Month)
PlantGrowth
s <- aggregate(PlantGrowth,by=list(group),FUN = mean())
s <- aggregate(PlantGrowth,by=list(group),FUN = mean)
s <- aggregate(PlantGrowth,by=list(group),FUN = mean)
?aggregate
s <- aggregate(PlantGrowth,by=list(Plantgrowth$group),FUN = mean)
s <- aggregate(PlantGrowth,by=list(PlantGrowth$group),FUN = mean)
s
airquality[is.na(airquality$Ozone,)]
airquality[is.na(airquality$Ozone),]
plot(data=iris,Speal.Width~Pteal.Width,col=species)
plot(data=iris,Speal.Width~Pteal.Width,col=Species,pch=c(1,2,3))
plot(data=iris,Sepal.Width~Pteal.Width,col=Species,pch=c(1,2,3))
plot(data=iris,Sepal.Width~Petal.Width,col=Species,pch=c(1,2,3))
plot(data=iris,Sepal.Width~Petal.Width,col=Species,pch=as.integer(Species))
plot(Weight~Time,data=subset(ChickWeight,ChicK==1))
plot(Weight~Time,data=subset(ChickWeight,ChicK==13&9))
plot(Weight~Time,data=subset(ChickWeight, ChicK==13 & 9))
plot(Weight~Time,data=subset(ChickWeight, ChicK==13))
View(ChickWeight)
plot(Weight~Time,data=subset(ChickWeight, ChicK==13))
View(ChickWeight)
data1 <- subset(ChickWeight,chick==13)
data1 <- subset(ChickWeight,Chick==13)
plot(1:10,pch=1:10)
data1 <- subset(ChickWeight,Chick==13)
data2 <- subset(ChickWeight,Chick==9)
plot(weight~time, data=data1,col=1,type="a")
plot(weight~time, data=data1,col=1,type="a")
boxplot(Species~Petal.Length, data=iris)
boxplot(Species~Petal.Length, data=iris,horizontal = TRUE)
iris1 <- aggregate(iris[,1:4],by=list(iris$Sepal.Length),FUN = mean)
iris1 <- aggregate(iris[,1:4],by=list(iris$Sepal.Length),FUN = mean)
iris1
barplot(cbind(Speal.Length,Pteal.Length)~Species,data=iris)
barplot(cbind(Sepal.Length,Pteal.Length)~Species,data=iris)
barplot(cbind(Sepal.Length,Petal.Length)~Species,data=iris)
iris_mean <- aggregate(iris)
iris_mean <- aggregate(iris,by=list(iris$Species),FUN = mean
0
iris_mean <- aggregate(iris,by=list(iris$Species),FUN = mean)
iris_mean
barplot(cbind("Sepal.Width","Pteal.Width")~Species,data = iris_mean,beside=TRUE,col=c())
barplot(cbind("Sepal.Width","Petal.Width")~Species,data = iris_mean,beside=TRUE,col=c())
barplot(cbind("Sepal.Width","Petal.Width")~Species,data = iris_mean,beside=TRUE,col=c("green","red"))
barplot(cbind(Sepal.Width, Petal.Width)~Species, data=iris_means, beside = TRUE,
space = c(0.1, 0.5), col = c("green", "red"))
s <- 0.4
Q <- barplot(cbind(Sepal.Width, Petal.Width)~Species, data=iris_means, beside = TRUE,
space = c(0.1, 0.5), col = c("green", "red"))
arrows(Q,iris)
se <- 0.4
coords <- barplot(cbind(Sepal.Width, Petal.Width)~Species, data=iris_means,
ylim=c(0,4), beside=TRUE, col=c("green", "red"))
arrows(coords[1,], iris_means$Sepal.Width - se,
coords[1,], iris_means$Sepal.Width + se,
angle = 90, code = 3, length = 0.05)
arrows(coords[2,], iris_means$Petal.Width - se,
coords[2,], iris_means$Petal.Width + se,
angle = 90, code = 3, length = 0.05)
plot(Petal.Length~Sepal.Length,data=iris)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss")
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main=lll)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll")
par(mar=c(5.1,4.1,2.1,1.2))
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll")
par_value <- par(no.readonly = TRUE)
par_value
par_value$mar
par(mar=c(5.1,4.1,2.1,5))
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll")
par(par_value)
par(par_value)
par_value
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=1)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=0)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=2)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=0)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=1)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=1)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=0)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=3)
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=3)
text(5.8,2,"dfajksfj")
plot(Petal.Length~Sepal.Length,data=iris,xlab="sss",main="lll",las=0)
legend("topright",legend = c("eee"),col=1)
legend("topright",legend = c("eee"),col=3)
legend("topright",legend = c("eee"),col=3,bty = n)
legend("topright",legend = c("eee"),col=3,bty = "n")
legend("topright",legend = c("eee"),col=3,bty = "n")
legend("topright",legend = c("eee"),col=3,bty = "n")
legend("topleft",legend = c("eee"),col=3,bty = "n")
install.packages("Thermimage")
install.packages("ThermStats")
1e-6
load("D:/1Rmodel/0310blackcameracircle-max/30cm/.RData")
write.table(dl, "Light.csv", row.names=F, col.names=F, sep=",")
dl <- data.frame(PAR_obs=Tl_mod, PAR_mod=Tl)
dl <- data.frame(PAR_obs=Tl_mod, PAR_mod=d$Tl)
write.table(dl, "Model.csv", row.names=F, col.names=F, sep=",")
dl <- data.frame(PAR_obs=Tl_mod, PAR_mod=d$Tl)
write.table(dl, "Model-30-black.csv", row.names=T, col.names=T, sep=",")
load("D:/1Rmodel/0314peppercameracircle/30cm/.RData")
dl <- data.frame(PAR_obs=Tl_mod, PAR_mod=d$Tl)
write.table(dl, "Model-30-pepper.csv", row.names=T, col.names=T, sep=",")
install.packages(c("bayesplot", "checkmate", "cli", "clipr", "colorspace", "crayon", "deSolve", "dplyr", "fansi", "ggplot2", "glue", "jsonlite", "magrittr", "matrixStats", "plyr", "posterior", "processx", "ps", "RColorBrewer", "Rcpp", "readxl", "rlang", "scales", "tibble", "tidyselect", "tzdb", "vctrs", "withr"))
install.packages("installr")
library(installr)
updateR(
updateR()
q()
setwd("D:/1Rmodel/1025three/40cm")
library(ggplot2)
library(cowplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(readxl)
color_scheme_set("brightblue")
theme_set(theme_cowplot())
###
#
# Warning: this model is only for a transpiring leaf !
#
###
# Directory of the data
dr <- "./pepper-1025-40cm/"
date <- "2022-10-25"
time <- "19:35:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Time points when the light was switched on
tON <- c("19:35:00",
"19:39:00",
"19:43:00",
"19:47:00",
"19:51:00")
# Observed vs. estimated light intensity (same units)
PAR <- c(103.8562544,
91.88830929,
79.06211431,
69.65567851,
60.96009451)
# Read and process air temperature data
dA <- read.csv(paste0(dr, "AirT.csv"))
dA$time <- as.POSIXct(paste(date, dA$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dA, aes(x=time, y=Temperature)) + geom_point()
ggplot(dA, aes(x=time, y=Humidity)) + geom_point()
# Read and process leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time", "Temperature", "Tair","Treflect")
# Parse date string
dL$ts <- as.POSIXct(paste(date, dL$Date), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dL, aes(x=ts, y=Temperature)) + geom_point()
ggplot(dL, aes(x=ts, y=Tair)) + geom_point()
# Find initial time common to both data sets
dA$time <- as.numeric(dA$time - t0)
dL$time <- dL$Time + as.numeric(dL$ts[1] - t0)
dA <- subset(dA, time >= 0)
dL <- subset(dL, time >= 0)
# Use splines to extract data at common time points
spl_A <- splinefun(dA$time, dA$Temperature)
spl_R <- splinefun(dA$time, dA$Humidity)
spl_L <- splinefun(dL$time, dL$Temperature)
spl_A2 <- splinefun(dL$time, dL$Tair)
spl_E <- splinefun(dL$time, dL$Treflect)
fitt <- smooth.spline(dA$time, dA$Humidity, cv=TRUE)
fitt2 <- smooth.spline(dA$time, dA$Temperature, cv=TRUE)
fitt3 <- smooth.spline(dL$time, dL$Tair, cv=TRUE)
fitt4 <- smooth.spline(dL$time, dL$Treflect, cv=TRUE)
fitt$df
fitt2$df
fitt3$df
fitt4$df
# Remove high frequency fluctuations
sspl_R <- smooth.spline(dA$time, dA$Humidity, df=71)
sspl_A <- smooth.spline(dA$time, dA$Temperature, df=24)
sspl_A2 <- smooth.spline(dL$time, dL$Tair, df=207)
sspl_E <- smooth.spline(dL$time, dL$Treflect, df=205)
# Check spline function
plot(Humidity~time, dA, pch=16)
points(predict(sspl_R, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Temperature~time, dA, pch=16)
lines(predict(sspl_A, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Tair~time, dL, pch=16)
lines(predict(sspl_A2, time)$y~time, dL, lty=2, lwd=2, col="red")
# New time points
time <- subset(dL, time < max(dA$time))$time
# Merge the data sets
d <- data.frame(time=time, Ta=predict(sspl_A, time)$y,
Ta2=predict(sspl_A2, time)$y,
Treflect=predict(sspl_E, time)$y,
Tl=spl_L(time),
RH=predict(sspl_R, time)$y)
# Correct for offset between Rotronic sensor and thermal camera temperature
#d$Tl <- d$Tl - (tail(d$Tl) - tail(d$Ta))
ggplot(d, aes(x=time)) + geom_point(aes(y=Ta)) +
geom_point(aes(y=Ta2), col="blue") +
geom_point(aes(y=Tl), col="red") + geom_point(aes(y=Treflect), col="green") +ylab("Temperature")
ggplot(d, aes(x=time, y=Tl - Ta)) + geom_point() + ylab("Tl - Ta")
# Function to be passed to the ODE solver
l <- NULL
l$N1 <- nrow(d)
# Time light was turned ON
l$tON <- paste(date, tON)
l$tON <- as.POSIXct(l$tON, format="%Y-%m-%d %H:%M:%OS")
l$tON <- as.numeric(l$tON - t0, units="secs")
l$N2 <- length(l$tON)
l$ts <- diff(c(0, l$tON, max(d$time)))
l$N3 <- length(l$ts)
l$dt <- rep(30, length(l$tON))
l$N4 <- length(l$dt)
l$Tair <- d$Ta
l$RH <- d$RH / 100
l$Treflect <- d$Treflect
l$Tleaf <- d$Tl
l$time <- d$time
l$step <- 0.1
l$tmax <- max(d$time)
###
# Generate initial parameter values
##
init <- function()
{
list(gbl=runif(1,0.01,0.03),
gsw=runif(1,0.001,0.003),
Qabs=runif(length(l$tON), 20, 200),
sT=runif(1,0.2,0.3))
}
# Compile the bayesian model
file <- file.path(getwd(), "model.stan")
header <- file.path(getwd(), "user_header.hpp")
mod <- cmdstan_model(file,
cpp_options=list(USER_HEADER=header),
stanc_options = list("allow-undefined"))
# Fit the model to observed data
fit <- mod$sample(
data = l,
chains = 4,
parallel_chains = 4,
refresh = 10,
init=init,
iter_warmup = 500,
iter_sampling = 500,
adapt_delta=0.7,
save_warmup = T,
output_dir=getwd(),
metric = "dense_e",
step_size=0.0001
)
# See if the model converged properly
fit$cmdstan_diagnose()
fit$save_object(file = "fit.RDS")
fit <- readRDS("fit.RDS")
# Diagnostic graphs
np <- names(init())
fs <- fit$summary(np)
mcmc_hist(fit$draws(np))
mcmc_trace(fit$draws(np), n_warmup=500)
mcmc_pairs(fit$draws(np))
png("Kin.png", width=1280, height=960, res=200)
par(mar=c(5,5,2,2))
mod <- matrix(matrix(fit$draws("mod")[,1,], nrow=500)[500,], ncol=1)
Tl_mod <- mod[,1]
plot(Tl~time, d, pch=16,
xlab="Time (s)",
ylab=expression("T ("*degree*"C)"))
points(Tl_mod~time, d, type="l", col="red", lty=2, lwd=2)
dev.off()
png("PAR.png", width=1280, height=960, res=200)
par(mar=c(5,5,2,2))
Q_mod <- fs$mean[3:(2+length(l$tON))]
plot(Q_mod~PAR, d, pch=16, xlim=c(0,300), ylim=c(0,300),
xlab=expression("PAR obs. (W m"^-2*")"),
ylab=expression("PAR mod. (W m"^-2*")"))
abline(lm(Q_mod~PAR-1, d), lwd=2, lty=2, col="red")
abline(0, 1, lwd=2, lty=2, col="blue")
dev.off()
dl <- data.frame(PAR_obs=PAR, PAR_mod=Q_mod)
write.table(dl, "Light.csv", row.names=F, col.names=F, sep=",")
write.table(Tl_mod, "Temperature.csv", row.names=F, col.names=F, sep=",")
write.table(d$Tl, "Temperature-Obs.csv", row.names=F, col.names=F, sep=",")
