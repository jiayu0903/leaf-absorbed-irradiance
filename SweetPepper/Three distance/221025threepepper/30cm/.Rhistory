)
)
# 假设你已经有以下数据
# 请将这些数据替换为你实际的数据
Cp <- c(3881.1,
3933.18,
3915.26,
3740.75,
3541.05,
3460.21,
3378.9,
3331.63,
3180.23,
3474.53,
3729.87,
3858.13
)
SLA <- c(4.23,
5.19,
4.36,
4.6035,
4.8555,
2.6073,
3.6137,
3.6496,
2.4,
4.7589,
0.8278,
3.9326
)
Proportion_of_dry_matter <- c(11.59,
14.79,
13.3,
31.74,
29.79,
37.66,
42.59,
33.99,
39.2,
13.86,
6.73,
11.49
)
# 创建数据框
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# 创建散点图
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma")+ geom_smooth(method = "lm", se = FALSE)+theme_minimal() +  # 使用theme_minimal()主题，设置透明背景
theme(panel.grid = element_blank())  +scale_x_continuous(limits = c(3000, 4000))
+annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, color = "black", size = 1, fill = NA)
# 创建数据框
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# 创建散点图
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma")+ geom_smooth(method = "lm", se = FALSE)+theme_minimal() +  # 使用theme_minimal()主题，设置透明背景
theme(panel.grid = element_blank())  +scale_x_continuous(limits = c(3000, 4000)) +annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, color = "black", size = 1, fill = NA)
# 显示图形
print(p)
# Register Times New Roman font
font_add("Times New Roman", regular = "times.ttf")
# Set the font for the whole plot
theme_set(
theme_minimal(base_family = "Times New Roman", base_size = 12) +
theme(
axis.text = element_text(family = "Times New Roman", size = 12), # Set axis labels font size
axis.title = element_text(family = "Times New Roman", size = 14), # Set axis titles font size
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Set axis line color
axis.ticks = element_line(color = "black"),
axis.ticks.length = unit(-0.2, "cm") # Set tick mark length (outward direction)
)
)
# 假设你已经有以下数据
# 请将这些数据替换为你实际的数据
Cp <- c(3881.1,
3933.18,
3915.26,
3740.75,
3541.05,
3460.21,
3378.9,
3331.63,
3180.23,
3474.53,
3729.87,
3858.13
)
SLA <- c(4.23,
5.19,
4.36,
4.6035,
4.8555,
2.6073,
3.6137,
3.6496,
2.4,
4.7589,
0.8278,
3.9326
)
Proportion_of_dry_matter <- c(11.59,
14.79,
13.3,
31.74,
29.79,
37.66,
42.59,
33.99,
39.2,
13.86,
6.73,
11.49
)
# 创建数据框
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# 创建散点图
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma")+ geom_smooth(method = "lm", se = FALSE)+theme_minimal() +  # 使用theme_minimal()主题，设置透明背景
theme(panel.grid = element_blank())  +scale_x_continuous(limits = c(3000, 4000)) +annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, color = "black", size = 1, fill = NA)
# 显示图形
print(p)
# Enable showtext
showtext_auto()
# Register Times New Roman font
font_add("Times New Roman", regular = "times.ttf")
# Set the font for the whole plot
theme_set(
theme_minimal(base_family = "Times New Roman", base_size = 12) +
theme(
axis.text = element_text(family = "Times New Roman", size = 12), # Set axis labels font size
axis.title = element_text(family = "Times New Roman", size = 14), # Set axis titles font size
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Set axis line color
axis.ticks.length = unit(-0.5, "cm"),
axis.ticks = element_line(color = "black") # Set tick mark length (outward direction)
)
)
# 假设你已经有以下数据
# 请将这些数据替换为你实际的数据
Cp <- c(3881.1,
3933.18,
3915.26,
3740.75,
3541.05,
3460.21,
3378.9,
3331.63,
3180.23,
3474.53,
3729.87,
3858.13
)
SLA <- c(4.23,
5.19,
4.36,
4.6035,
4.8555,
2.6073,
3.6137,
3.6496,
2.4,
4.7589,
0.8278,
3.9326
)
Proportion_of_dry_matter <- c(11.59,
14.79,
13.3,
31.74,
29.79,
37.66,
42.59,
33.99,
39.2,
13.86,
6.73,
11.49
)
# 创建数据框
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# 创建散点图
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma")+ geom_smooth(method = "lm", se = FALSE)+theme_minimal() +  # 使用theme_minimal()主题，设置透明背景
theme(panel.grid = element_blank())  +scale_x_continuous(limits = c(3000, 4000)) +annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, color = "black", size = 1, fill = NA)
# 显示图形
print(p)
# Enable showtext
showtext_auto()
# Register Times New Roman font
font_add("Times New Roman", regular = "times.ttf")
# Set the font for the whole plot
theme_set(
theme_minimal(base_family = "Times New Roman", base_size = 12) +
theme(
axis.text = element_text(family = "Times New Roman", size = 12),
axis.title = element_text(family = "Times New Roman", size = 14),
axis.line = element_line(color = "black"),
axis.ticks.length = unit(-0.2, "cm"),
axis.ticks = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA)  # Add black border around the entire plot
)
)
# Sample data
Cp <- c(3881.1, 3933.18, 3915.26, 3740.75, 3541.05, 3460.21, 3378.9, 3331.63, 3180.23, 3474.53, 3729.87, 3858.13)
SLA <- c(4.23, 5.19, 4.36, 4.6035, 4.8555, 2.6073, 3.6137, 3.6496, 2.4, 4.7589, 0.8278, 3.9326)
Proportion_of_dry_matter <- c(11.59, 14.79, 13.3, 31.74, 29.79, 37.66, 42.59, 33.99, 39.2, 13.86, 6.73, 11.49)
# Create data frame
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# Create scatter plot
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma") +
geom_smooth(method = "lm", se = FALSE)
# Display the plot
print(p)
# Enable showtext
showtext_auto()
# Register Times New Roman font
font_add("Times New Roman", regular = "times.ttf")
# Set the font for the whole plot
theme_set(
theme_minimal(base_family = "Times New Roman", base_size = 12) +
theme(
axis.text = element_text(family = "Times New Roman", size = 12),
axis.title = element_text(family = "Times New Roman", size = 14),
axis.line = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"),
axis.ticks = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA)  # Add black border around the entire plot
)
)
# Sample data
Cp <- c(3881.1, 3933.18, 3915.26, 3740.75, 3541.05, 3460.21, 3378.9, 3331.63, 3180.23, 3474.53, 3729.87, 3858.13)
SLA <- c(4.23, 5.19, 4.36, 4.6035, 4.8555, 2.6073, 3.6137, 3.6496, 2.4, 4.7589, 0.8278, 3.9326)
Proportion_of_dry_matter <- c(11.59, 14.79, 13.3, 31.74, 29.79, 37.66, 42.59, 33.99, 39.2, 13.86, 6.73, 11.49)
# Create data frame
data <- data.frame(Cp, SLA, Proportion_of_dry_matter)
# Create scatter plot
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma") +
geom_smooth(method = "lm", se = FALSE)
# Display the plot
print(p)
# Create scatter plot
p <- ggplot(data, aes(x = Cp, y = SLA, color = Proportion_of_dry_matter)) +
geom_point(size = 4) +
scale_color_viridis(name = "Proportion of dry matter (%)", option = "magma") +
geom_smooth(method = "lm", se = FALSE)+scale_x_continuous(limits = c(3000, 4000))
# Display the plot
print(p)
# Save the plot with specific dimensions in pixels
ggsave("SLA&Cp.png", plot = p, width = 800, height = 600, dpi = 300)
# Save the plot with specific dimensions in pixels
ggsave("SLA&Cp.png", plot = p, width = 800, height = 600, dpi = 300, limitsize = FALSE)
# Save the plot with specific dimensions in pixels
ggsave("SLA&Cp.png", plot = p, width = 8, height = 6, units = "in", dpi = 300)
setwd("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/30cm")
load("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/30cm/.RData")
fs
fs\
fs
load("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/30cm/.RData")
fs
setwd("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/40cm")
load("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1026threepepper-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1026threepepper-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1026threepepper-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1029threepepper-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1029threepepper-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/SweetPepper/1029threepepper-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used2/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used2/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1215threecucumber-used2/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1219threecucumber-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1219threecucumber-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Cucumber/1219threecucumber-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/40cm/.RData")
fs
setwd("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/40cm")
fit <- readRDS("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/40cm/fit.RDS")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1114threetomatoresponse-used2/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1115threetomatoresponse-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1115threetomatoresponse-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-response/1115threetomatoresponse-used/50cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-stable/1111threetomato-used/30cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-stable/1111threetomato-used/40cm/.RData")
fs
load("D:/1Rmodel/WP1/Tomato/gsw-stable/1111threetomato-used/50cm/.RData")
fs
setwd("D:/1Rmodel/WP1/SweetPepper/1025threepepper-used/30cm")
library(ggplot2)
library(cowplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(readxl)
color_scheme_set("brightblue")
theme_set(theme_cowplot())
###
#
# Warning: this model is only for a transpiring leaf !
#
###
# Directory of the data
dr <- "./pepper-1025-30cm/"
date <- "2022-10-25"
time <- "19:35:00"
# Start time of the temperature records
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Time points when the light was switched on
tON <- c("19:35:00",
"19:39:00",
"19:43:00",
"19:47:00",
"19:51:00")
# Observed vs. estimated light intensity (same units)
PAR <- c(186.2555652,
168.1329206,
144.4270982,
128.7322691,
111.271802)
# Read and process air temperature data
dA <- read.csv(paste0(dr, "AirT.csv"))
dA$time <- as.POSIXct(paste(date, dA$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dA, aes(x=time, y=Temperature)) + geom_point()
ggplot(dA, aes(x=time, y=Humidity)) + geom_point()
# Read and process leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time", "Temperature", "Tair","Treflect")
# Parse date string
dL$ts <- as.POSIXct(paste(date, dL$Date), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dL, aes(x=ts, y=Temperature)) + geom_point()
ggplot(dL, aes(x=ts, y=Tair)) + geom_point()
# Find initial time common to both data sets
dA$time <- as.numeric(dA$time - t0)
dL$time <- dL$Time + as.numeric(dL$ts[1] - t0)
dA <- subset(dA, time >= 0)
dL <- subset(dL, time >= 0)
# Use splines to extract data at common time points
spl_A <- splinefun(dA$time, dA$Temperature)
spl_R <- splinefun(dA$time, dA$Humidity)
spl_L <- splinefun(dL$time, dL$Temperature)
spl_A2 <- splinefun(dL$time, dL$Tair)
spl_E <- splinefun(dL$time, dL$Treflect)
fitt <- smooth.spline(dA$time, dA$Humidity, cv=TRUE)
fitt2 <- smooth.spline(dA$time, dA$Temperature, cv=TRUE)
fitt3 <- smooth.spline(dL$time, dL$Tair, cv=TRUE)
fitt4 <- smooth.spline(dL$time, dL$Treflect, cv=TRUE)
fitt$df
fitt2$df
fitt3$df
fitt4$df
# Remove high frequency fluctuations
sspl_R <- smooth.spline(dA$time, dA$Humidity, df=71)
sspl_A <- smooth.spline(dA$time, dA$Temperature, df=24)
sspl_A2 <- smooth.spline(dL$time, dL$Tair, df=207)
sspl_E <- smooth.spline(dL$time, dL$Treflect, df=205)
# Check spline function
plot(Humidity~time, dA, pch=16)
points(predict(sspl_R, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Temperature~time, dA, pch=16)
lines(predict(sspl_A, time)$y~time, dA, lty=2, lwd=2, col="red")
plot(Tair~time, dL, pch=16)
lines(predict(sspl_A2, time)$y~time, dL, lty=2, lwd=2, col="red")
# New time points
time <- subset(dL, time < max(dA$time))$time
# Merge the data sets
d <- data.frame(time=time, Ta=predict(sspl_A, time)$y,
Ta2=predict(sspl_A2, time)$y,
Treflect=predict(sspl_E, time)$y,
Tl=spl_L(time),
RH=predict(sspl_R, time)$y)
# Correct for offset between Rotronic sensor and thermal camera temperature
#d$Tl <- d$Tl - (tail(d$Tl) - tail(d$Ta))
ggplot(d, aes(x=time)) + geom_point(aes(y=Ta)) +
geom_point(aes(y=Ta2), col="blue") +
geom_point(aes(y=Tl), col="red") + geom_point(aes(y=Treflect), col="green") +ylab("Temperature")
ggplot(d, aes(x=time, y=Tl - Ta)) + geom_point() + ylab("Tl - Ta")
# Function to be passed to the ODE solver
l <- NULL
l$N1 <- nrow(d)
# Time light was turned ON
l$tON <- paste(date, tON)
l$tON <- as.POSIXct(l$tON, format="%Y-%m-%d %H:%M:%OS")
l$tON <- as.numeric(l$tON - t0, units="secs")
l$N2 <- length(l$tON)
l$ts <- diff(c(0, l$tON, max(d$time)))
l$N3 <- length(l$ts)
l$dt <- rep(30, length(l$tON))
l$N4 <- length(l$dt)
l$Tair <- d$Ta
l$RH <- d$RH / 100
l$Treflect <- d$Treflect
l$Tleaf <- d$Tl
l$time <- d$time
l$step <- 0.1
l$tmax <- max(d$time)
###
# Generate initial parameter values
##
init <- function()
{
list(gbl=runif(1,0.01,0.03),
gsw=runif(1,0.001,0.003),
Qabs=runif(length(l$tON), 20, 200),
sT=runif(1,0.2,0.3))
}
# Compile the bayesian model
file <- file.path(getwd(), "model.stan")
header <- file.path(getwd(), "user_header.hpp")
mod <- cmdstan_model(file,
cpp_options=list(USER_HEADER=header),
stanc_options = list("allow-undefined"))
# Fit the model to observed data
fit <- mod$sample(
data = l,
chains = 4,
parallel_chains = 4,
refresh = 10,
init=init,
iter_warmup = 500,
iter_sampling = 500,
adapt_delta=0.7,
save_warmup = T,
output_dir=getwd(),
metric = "dense_e",
step_size=0.0001
)
# See if the model converged properly
fit$cmdstan_diagnose()
fit$save_object(file = "fit.RDS")
fit <- readRDS("fit.RDS")
# Diagnostic graphs
np <- names(init())
fs <- fit$summary(np)
mcmc_hist(fit$draws(np))
mcmc_trace(fit$draws(np), n_warmup=500)
mcmc_pairs(fit$draws(np))
png("Kin.png", width=1280, height=960, res=200)
par(mar=c(5,5,2,2))
mod <- matrix(matrix(fit$draws("mod")[,1,], nrow=500)[500,], ncol=1)
Tl_mod <- mod[,1]
plot(Tl~time, d, pch=16,
xlab="Time (s)",
ylab=expression("T ("*degree*"C)"))
points(Tl_mod~time, d, type="l", col="red", lty=2, lwd=2)
dev.off()
png("PAR.png", width=1280, height=960, res=200)
par(mar=c(5,5,2,2))
Q_mod <- fs$mean[3:(2+length(l$tON))]
plot(Q_mod~PAR, d, pch=16, xlim=c(0,300), ylim=c(0,300),
xlab=expression("PAR obs. (W m"^-2*")"),
ylab=expression("PAR mod. (W m"^-2*")"))
abline(lm(Q_mod~PAR-1, d), lwd=2, lty=2, col="red")
abline(0, 1, lwd=2, lty=2, col="blue")
dev.off()
dl <- data.frame(PAR_obs=PAR, PAR_mod=Q_mod)
write.table(dl, "Light.csv", row.names=F, col.names=F, sep=",")
write.table(Tl_mod, "Temperature.csv", row.names=F, col.names=F, sep=",")
write.table(d$Tl, "Temperature-Obs.csv", row.names=F, col.names=F, sep=",")
fs
